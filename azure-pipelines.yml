# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: ubuntu-latest

stages:
#  - stage: Prepare
#    jobs:
#      - job: Prepare_SSL_files
#        steps:
#          - task: DownloadSecureFile@1
#            name: sslCert
#            displayName: 'Download cert'
#            inputs:
#              secureFile: 'example.crt'
#
#          - task: DownloadSecureFile@1
#            name: sslKey
#            displayName: 'Download key'
#            inputs:
#              secureFile: 'example.key'
#
#          - script: |
#              echo "$(whoami)"
#              sudo chown "$(whoami)":root $(sslCert.secureFilePath)
#              sudo chmod 600 $(sslCert.secureFilePath)
#              sudo chown "$(whoami)":root $(sslKey.secureFilePath)
#              sudo chmod 600 $(sslKey.secureFilePath)
#
#              TARGET_DIR="/home/$(whoami)/.ssl"
#              echo "TARGET_DIR: $TARGET_DIR"
#              mkdir -p "$TARGET_DIR"
#              sudo ln -s $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
#              sudo ln -s $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
#              echo "files:"
#              ls -al "$TARGET_DIR"
#              #sudo chown "$(whoami)" "$TARGET_DIR"/*
#              #sudo chmod 600 "$TARGET_DIR"/*
#              #ls -al "$TARGET_DIR"
#              sudo chown -R "$(whoami)" "$TARGET_DIR"
#            displayName: 'Prepare SSL key and cert'

#  - stage: Build
#    jobs:
#      - job: Build_Docker_Containers
#        steps:
#          - task: DownloadSecureFile@1
#            name: sslCert
#            displayName: 'Download cert'
#            inputs:
#              secureFile: 'example.crt'
#
#          - task: DownloadSecureFile@1
#            name: sslKey
#            displayName: 'Download key'
#            inputs:
#              secureFile: 'example.key'
#
#          - script: |
#              echo "$(whoami)"
#              sudo chown "$(whoami)":root $(sslCert.secureFilePath)
#              sudo chmod 600 $(sslCert.secureFilePath)
#              sudo chown "$(whoami)":root $(sslKey.secureFilePath)
#              sudo chmod 600 $(sslKey.secureFilePath)
#
#              TARGET_DIR="/home/$(whoami)/.ssl"
#              echo "TARGET_DIR: $TARGET_DIR"
#              mkdir -p "$TARGET_DIR"
#              sudo ln -s $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
#              sudo ln -s $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
#              #sudo cp $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
#              #sudo cp $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
#              echo "files:"
#              ls -al "$TARGET_DIR"
#              #sudo chown "$(whoami)" "$TARGET_DIR"/*
#              #sudo chmod 600 "$TARGET_DIR"/*
#              #ls -al "$TARGET_DIR"
#              sudo chown -R "$(whoami)" "$TARGET_DIR"
#            displayName: 'Prepare SSL key and cert'
#
#          - script: |
#              #TARGET_DIR="/home/$(whoami)/.ssl"
#              #ls -al "$TARGET_DIR"
#              #bash .github/actions/runDockerE2E.sh
#              export CERT_PATH="$HOME/.ssl/example"
#              bash .github/actions/run_docker_e2e.sh "127.0.0.1" "https"
#            env:
#              MONGO_USER: $(MONGO_USER)
#              MONGO_PASS: $(MONGO_PASS)
#            displayName: 'Build containers'
#
#          - script: |
#              docker-compose up -d
#              docker ps
#              sleep 30
#              #HOST_IP="$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)"
#              HOST_IP="127.0.0.1"
#              echo "HOST_IP: $HOST_IP"
#
#              echo "Waiting for web server"
#              bash .github/actions/waitForServer.sh "127.0.0.1:4200"
#              sleep 30
#              curl -s --insecure "http://127.0.0.1:4200/login"
#              #curl -s --insecure  "http://127.0.0.1:8080/version"
#              curl -s --insecure "https://127.0.0.1:8081/login"
#              #curl -s --insecure  "https://127.0.0.1:8081/api/version"
#              RES="$(curl -s --insecure "https://$HOST_IP:8081/api/version")"
#              echo "RES: $RES"
#              [ "$RES" == "TODO" ]
#            displayName: 'Run containers'
#
#          - script: |
#              cd ../SplitMan2-API
#              #HOST_IP="127.0.0.1"
#              mvn test -Dtest=MongoTests#mainSetup -f pom.xml
#            displayName: 'Setup E2E Tests'
#
#          - script: |
#              #HOST_IP="$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)"
#              HOST_IP="127.0.0.1"
#              npm install -g npm@9.3.0
#              npm ci
#              npm run e2e -- --headless=false --host="$HOST_IP:8081"
#            displayName: 'Run E2E Tests'

#  - stage: Deploy
#    jobs:
#      - job: Deploy_Docker_Containers
#        steps:
#          - task: DownloadSecureFile@1
#            name: sshKey
#            displayName: 'Download SSH key'
#            inputs:
#              secureFile: 'id_releaseUser'
#
#          - script: |
#              echo "$(whoami)"
#              #sudo chown "$(whoami)":root "$(sshKey.secureFilePath)"
#              #sudo chmod 600 "$(sshKey.secureFilePath)"
#              TARGET_DIR="/home/$(whoami)/.ssh"
#              echo "TARGET_DIR: $TARGET_DIR"
#              mkdir -p "$TARGET_DIR"
#              sudo cp "$(sshKey.secureFilePath)" "$TARGET_DIR/id_releaseUser"
#              sudo chmod 600 "$TARGET_DIR/id_releaseUser"
#              sudo chown -R "$(whoami)" "$TARGET_DIR"
#            displayName: 'Prepare SSH key'
#
#          - script: |
#              # add ssh in config
#              FILE="$HOME/.ssh/config"
#              tee -a "$FILE" > /dev/null <<EOT
#              Host ovhVM_rel
#                HostName "$(DEBIAN_IP)"
#                User "$(DEBIAN_USER)"
#                IdentityFile "$HOME/.ssh/id_releaseUser"
#                Port 22
#                PreferredAuthentications publickey
#              EOT
#
#              # add key to agent ?
#              eval "$(ssh-agent -s)" && ssh-add "$HOME/.ssh/id_releaseUser"
#              echo "Added key to agent"
#
#              if [ ! -f "$HOME/.ssh/known_hosts" ]; then
#                touch "$HOME/.ssh/known_hosts"
#              fi
#              ssh-keyscan -t rsa 79.137.33.77 >> "$HOME/.ssh/known_hosts"
#              cat "$HOME/.ssh/known_hosts"
#            env:
#              DEBIAN_USER: $(DEBIAN_USER)
#              DEBIAN_IP: $(DEBIAN_IP)
#            displayName: 'Setup SSH access'
#
#          - script: |
#              chmod +x .github/actions/remote/*.sh
#              chmod +x .github/actions/*.sh
#              ls -al "$HOME/.ssh"
#              cat "$HOME/.ssh/config"
#              bash .github/actions/remote/backup_current.sh
#            env:
#              DEBIAN_PATH: $(DEBIAN_PATH)
#            displayName: 'Backup current'
#
#          - script: |
#              #chmod +x .github/actions/remote/*.sh
#              #chmod +x .github/actions/*.sh
#              bash .github/actions/remote/build_containers.sh
#            env:
#              DEBIAN_PATH: $(DEBIAN_PATH)
#              DEBIAN_IP: $(DEBIAN_IP)
#              MONGO_USER: $(MONGO_USER)
#              MONGO_PASS: $(MONGO_PASS)
#            displayName: 'Build containers'
#
#          - script: |
#              bash .github/actions/remote/run_containers.sh
#            env:
#              DEBIAN_PATH: $(DEBIAN_PATH)
#            displayName: 'Run containers'
#
#          - script: |
#              bash .github/actions/remote/setup_db.sh
#            env:
#              DEBIAN_IP: $(DEBIAN_IP)
#              DEBIAN_PATH: $(DEBIAN_PATH)
#            displayName: 'Setup DB'

  - stage: Run_E2E
    jobs:
      - job: Run_E2E_Tests
        steps:
          - script: |
              HOST_IP="${DEBIAN_IP}"
              npm install -g npm@9.3.0
              npm i
              npm run e2e -- --headless=true --host="$HOST_IP:8081"
            env:
              DEBIAN_IP: $(DEBIAN_IP)
            displayName: 'Run E2E Tests'
