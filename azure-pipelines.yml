# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: ubuntu-latest

stages:
#  - stage: Prepare
#    jobs:
#      - job: Prepare_SSL_files
#        steps:
#          - task: DownloadSecureFile@1
#            name: sslCert
#            displayName: 'Download cert'
#            inputs:
#              secureFile: 'example.crt'
#
#          - task: DownloadSecureFile@1
#            name: sslKey
#            displayName: 'Download key'
#            inputs:
#              secureFile: 'example.key'
#
#          - script: |
#              echo "$(whoami)"
#              sudo chown "$(whoami)":root $(sslCert.secureFilePath)
#              sudo chmod 600 $(sslCert.secureFilePath)
#              sudo chown "$(whoami)":root $(sslKey.secureFilePath)
#              sudo chmod 600 $(sslKey.secureFilePath)
#
#              TARGET_DIR="/home/$(whoami)/.ssl"
#              echo "TARGET_DIR: $TARGET_DIR"
#              mkdir -p "$TARGET_DIR"
#              sudo ln -s $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
#              sudo ln -s $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
#              echo "files:"
#              ls -al "$TARGET_DIR"
#              #sudo chown "$(whoami)" "$TARGET_DIR"/*
#              #sudo chmod 600 "$TARGET_DIR"/*
#              #ls -al "$TARGET_DIR"
#              sudo chown -R "$(whoami)" "$TARGET_DIR"
#            displayName: 'Prepare SSL key and cert'

  - stage: Build
    jobs:
      - job: Build_Docker_Containers
        steps:
          - task: DownloadSecureFile@1
            name: sslCert
            displayName: 'Download cert'
            inputs:
              secureFile: 'example.crt'

          - task: DownloadSecureFile@1
            name: sslKey
            displayName: 'Download key'
            inputs:
              secureFile: 'example.key'

          - script: |
              echo "$(whoami)"
              sudo chown "$(whoami)":root $(sslCert.secureFilePath)
              sudo chmod 600 $(sslCert.secureFilePath)
              sudo chown "$(whoami)":root $(sslKey.secureFilePath)
              sudo chmod 600 $(sslKey.secureFilePath)

              TARGET_DIR="/home/$(whoami)/.ssl"
              echo "TARGET_DIR: $TARGET_DIR"
              mkdir -p "$TARGET_DIR"
              sudo ln -s $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
              sudo ln -s $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
              #sudo cp $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
              #sudo cp $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
              echo "files:"
              ls -al "$TARGET_DIR"
              #sudo chown "$(whoami)" "$TARGET_DIR"/*
              #sudo chmod 600 "$TARGET_DIR"/*
              #ls -al "$TARGET_DIR"
              sudo chown -R "$(whoami)" "$TARGET_DIR"
            displayName: 'Prepare SSL key and cert'

          - script: |
              #TARGET_DIR="/home/$(whoami)/.ssl"
              #ls -al "$TARGET_DIR"
              #bash .github/actions/runDockerE2E.sh
              export CERT_PATH="$HOME/.ssl/example"
              bash .github/actions/run_docker_e2e.sh "127.0.0.1" "https"
            env:
              MONGO_USER: $(MONGO_USER)
              MONGO_PASS: $(MONGO_PASS)
            displayName: 'Build containers'

          - script: |
              docker-compose up -d
              docker ps
              sleep 30
              #HOST_IP="$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)"
              HOST_IP="127.0.0.1"
              echo "HOST_IP: $HOST_IP"

              echo "Waiting for web server"
              bash .github/actions/waitForServer.sh "127.0.0.1:4200"
              sleep 30
              curl -s --insecure "http://127.0.0.1:4200/login"
              curl -s --insecure  "http://127.0.0.1:8080/version"
              curl -s --insecure  "https://127.0.0.1:8081/api/version"
              RES="$(curl -s --insecure "https://$HOST_IP:8081/api/version")"
              echo "RES: $RES"
              [ "$RES" == "TODO" ]
            displayName: 'Run containers'
          - script: |
              #HOST_IP="$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)"
              HOST_IP="127.0.0.1"
              npm run e2e -- --headless=false --host="$HOST_IP:8081"
            displayName: 'Run E2E Tests'

  - stage: Deploy
    jobs:
      - job: Deploy_Docker_Containers
        steps:
          - task: DownloadSecureFile@1
            name: sslCert
            displayName: 'Download cert'
            inputs:
              secureFile: 'example.crt'

          - task: DownloadSecureFile@1
            name: sslKey
            displayName: 'Download key'
            inputs:
              secureFile: 'example.key'

          - script: |
              echo "$(whoami)"
              sudo chown "$(whoami)":root $(sslCert.secureFilePath)
              sudo chmod 600 $(sslCert.secureFilePath)
              sudo chown "$(whoami)":root $(sslKey.secureFilePath)
              sudo chmod 600 $(sslKey.secureFilePath)

              TARGET_DIR="/home/$(whoami)/.ssl"
              echo "TARGET_DIR: $TARGET_DIR"
              mkdir -p "$TARGET_DIR"
              sudo ln -s $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
              sudo ln -s $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
              #sudo cp $(sslCert.secureFilePath) "$TARGET_DIR/example.crt"
              #sudo cp $(sslKey.secureFilePath) "$TARGET_DIR/example.key"
              echo "files:"
              ls -al "$TARGET_DIR"
              #sudo chown "$(whoami)" "$TARGET_DIR"/*
              #sudo chmod 600 "$TARGET_DIR"/*
              #ls -al "$TARGET_DIR"
              sudo chown -R "$(whoami)" "$TARGET_DIR"
            displayName: 'Prepare SSL key and cert'

          - script: |
              # copy run script
              scp .github/actions/run_docker_e2e.sh "${DEBIAN_USER}@${DEBIAN_IP}:${DEBIAN_PATH}"
              scp docker-compose.yml "${DEBIAN_USER}@${DEBIAN_IP}:${DEBIAN_PATH}/"
              ssh -oBatchMode=yes "${DEBIAN_USER}@${DEBIAN_IP}:${DEBIAN_PATH}" bash << EOF
                cd "${DEBIAN_PATH}"
                chmod +x ./*.sh
                ./run_docker_e2e.sh "" "https"
              EOF
              #TARGET_DIR="/home/$(whoami)/.ssl"
              #ls -al "$TARGET_DIR"
              #bash .github/actions/runDockerE2E.sh
              #export CERT_PATH="$HOME/.ssl/example"
              bash .github/actions/run_docker_e2e.sh "127.0.0.1" "https"
            displayName: 'Build containers 1'

          - script: |
              ssh -oBatchMode=yes "${DEBIAN_USER}@${DEBIAN_IP}:${DEBIAN_PATH}" bash << EOF
                cd "${DEBIAN_PATH}"
                docker-compose up -d
              EOF
            displayName: 'Run containers'
          - script: |
              HOST_IP="${DEBIAN_IP}"
              npm run e2e -- --headless=false --host="$HOST_IP:8081"
            displayName: 'Run E2E Tests'
